# Generated by Django 5.2.6 on 2025-10-12 14:47

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AnalyticsSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_type', models.CharField(choices=[('W', 'Weekly'), ('M', 'Monthly')], max_length=1)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('total_views', models.IntegerField(default=0)),
                ('total_contacts', models.IntegerField(default=0)),
                ('total_favorites', models.IntegerField(default=0)),
                ('total_searches', models.IntegerField(default=0)),
                ('conversion_rate', models.FloatField(default=0)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='DailyAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('views', models.IntegerField(default=0)),
                ('contacts', models.IntegerField(default=0)),
                ('favorites', models.IntegerField(default=0)),
                ('searches_appeared', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HostelAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_views', models.IntegerField(default=0)),
                ('total_contacts', models.IntegerField(default=0)),
                ('total_favorites', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='InteractionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('view', 'Viewed Hostel'), ('whatsapp', 'WhatsApp Contact'), ('call', 'Phone Call'), ('search', 'Search Result Click')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('safety_confirmed', models.BooleanField(default=False, help_text='Whether the user confirmed the safety modal (required for female users)')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('fake', 'Fake Listing'), ('inappropriate', 'Inappropriate Content'), ('spam', 'Spam'), ('fraud', 'Fraud Attempt'), ('incorrect_info', 'Incorrect Information'), ('safety', 'Safety Concern'), ('other', 'Other')], max_length=20)),
                ('details', models.TextField(help_text='Additional details about the report')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('investigating', 'Under Investigation'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(help_text='Rating from 1 to 5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90.0, message='Latitude must be between -90 and 90 degrees'), django.core.validators.MaxValueValidator(90.0, message='Latitude must be between -90 and 90 degrees')])),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180.0, message='Longitude must be between -180 and 180 degrees'), django.core.validators.MaxValueValidator(180.0, message='Longitude must be between -180 and 180 degrees')])),
                ('radius', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='Search radius must be at least 1 kilometer'), django.core.validators.MaxValueValidator(50, message='Search radius cannot exceed 50 kilometers')])),
                ('gender_preference', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=10, null=True)),
                ('min_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.0, message='Minimum price cannot be negative')])),
                ('max_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.0, message='Maximum price cannot be negative')])),
                ('facilities', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
